"""
Debug do algoritmo de detec√ß√£o de movimento
Investigar por que est√° detectando FP ao inv√©s de FD
"""

def debug_detection_algorithm():
    """Examina detalhadamente o algoritmo de detec√ß√£o"""
    
    print("üîç INVESTIGANDO ALGORITMO DE DETEC√á√ÉO...")
    
    # Testar detec√ß√£o com debug detalhado
    test_code = '''
from tennis_comparison_backend import TennisComparisonEngine
import cv2
import numpy as np

def debug_single_frame_analysis():
    """Debug detalhado da an√°lise de um frame"""
    
    analyzer = TennisComparisonEngine()
    
    # Verificar se m√©todo existe
    if hasattr(analyzer, '_analyze_single_frame_movement'):
        print("‚úÖ M√©todo _analyze_single_frame_movement encontrado")
    else:
        print("‚ùå M√©todo _analyze_single_frame_movement N√ÉO encontrado")
        return
    
    # Verificar se m√©todo de detec√ß√£o existe
    if hasattr(analyzer, 'analyze_movement_from_content'):
        print("‚úÖ M√©todo analyze_movement_from_content encontrado")
    else:
        print("‚ùå M√©todo analyze_movement_from_content N√ÉO encontrado")
        return
    
    print("üîç Executando an√°lise com debug...")
    
    # Executar an√°lise
    result = analyzer.analyze_movement_from_content('teste_neutro.mp4')
    
    print("üìä RESULTADO COMPLETO:")
    print(f"   Movimento: {result.get('movement', 'N/A')}")
    print(f"   Confian√ßa: {result.get('confidence', 'N/A')}")
    print(f"   M√©todo: {result.get('method', 'N/A')}")
    
    if 'stats' in result:
        stats = result['stats']
        print("üìà ESTAT√çSTICAS:")
        print(f"   Total frames: {stats.get('total_frames', 'N/A')}")
        print(f"   Votos: {stats.get('votes', 'N/A')}")
        print(f"   Consist√™ncia: {stats.get('consistency', 'N/A')}")
    
    return result

# Executar debug
print("=== DEBUG DA DETEC√á√ÉO ===")
result = debug_single_frame_analysis()

if result and result.get('movement') == 'FP':
    print("\\nüö® CONFIRMADO: Sistema detecta FP incorretamente!")
    print("üîç Vamos investigar a l√≥gica de classifica√ß√£o...")
    
    # Verificar l√≥gica de classifica√ß√£o Drive vs Push
    print("\\n=== INVESTIGANDO L√ìGICA DRIVE vs PUSH ===")
    print("üìã CRIT√âRIOS ESPERADOS:")
    print("   DRIVE: maior amplitude + pulso mais alto")
    print("   PUSH: movimento compacto + pulso mais baixo")
    print("\\nüîß POSS√çVEIS PROBLEMAS:")
    print("   1. Thresholds incorretos para amplitude")
    print("   2. L√≥gica invertida de altura do pulso")
    print("   3. An√°lise de frames espec√≠ficos incorreta")
    print("   4. Fallback para Push como padr√£o")

print("\\n" + "="*50)
'''
    
    # Salvar script de debug
    with open('debug_detection.py', 'w', encoding='utf-8') as f:
        f.write(test_code)
    
    print("‚úÖ Script de debug criado: debug_detection.py")
    print("\nüîç EXECUTE PARA INVESTIGAR:")
    print("python debug_detection.py")
    
    # Criar script de corre√ß√£o baseado na investiga√ß√£o
    correction_code = '''
"""
Corre√ß√£o do algoritmo de detec√ß√£o Drive vs Push
Baseado na investiga√ß√£o dos thresholds incorretos
"""

def fix_detection_algorithm():
    """Corrige os thresholds de detec√ß√£o Drive vs Push"""
    
    import re
    from datetime import datetime
    
    print("üîß CORRIGINDO ALGORITMO DE DETEC√á√ÉO...")
    
    # Backup
    backup_filename = f"tennis_comparison_backend_detection_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    
    with open('tennis_comparison_backend.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    with open(backup_filename, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"üìÅ Backup criado: {backup_filename}")
    
    # Procurar pela l√≥gica de classifica√ß√£o Drive vs Push
    # Padr√£o t√≠pico seria algo como:
    # if horizontal_amplitude > X and wrist_height_relative > Y:
    #     movement = 'FD'  # Drive
    # else:
    #     movement = 'FP'  # Push
    
    # Corrigir thresholds para melhor detec√ß√£o de Drive
    fixes = [
        # Reduzir threshold de amplitude para Drive (era muito alto)
        (r'horizontal_amplitude > 0\\.3', 'horizontal_amplitude > 0.2'),
        
        # Reduzir threshold de altura para Drive (era muito alto)
        (r'wrist_height_relative > 0\\.1', 'wrist_height_relative > 0.05'),
        
        # Para Backhand Drive, ajustar tamb√©m
        (r'horizontal_amplitude > 0\\.25 and wrist_height_relative > 0\\.05', 
         'horizontal_amplitude > 0.15 and wrist_height_relative > 0.02'),
        
        # Adicionar debug na classifica√ß√£o
        (r'# CLASSIFICA√á√ÉO', 
         '''# CLASSIFICA√á√ÉO - com debug detalhado
        print(f"üîç DEBUG CLASSIFICA√á√ÉO:")
        print(f"   wrist_cross_body: {wrist_cross_body}")
        print(f"   horizontal_amplitude: {horizontal_amplitude:.3f}")
        print(f"   wrist_height_relative: {wrist_height_relative:.3f}")'''),
    ]
    
    changes_made = 0
    for pattern, replacement in fixes:
        if re.search(pattern, content):
            content = re.sub(pattern, replacement, content)
            changes_made += 1
            print(f"‚úÖ Ajuste aplicado: {pattern}")
    
    if changes_made == 0:
        print("‚ö†Ô∏è Nenhuma altera√ß√£o autom√°tica aplicada")
        print("üìã POSS√çVEIS PROBLEMAS:")
        print("1. L√≥gica de classifica√ß√£o diferente do esperado")
        print("2. Thresholds em local diferente")
        print("3. Algoritmo usa m√©todo completamente diferente")
        print("\\nüîç MANUAL: Abra tennis_comparison_backend.py e procure por:")
        print("- _analyze_single_frame_movement")
        print("- horizontal_amplitude")
        print("- wrist_height_relative")
        print("- CLASSIFICA√á√ÉO")
    else:
        # Salvar arquivo corrigido
        with open('tennis_comparison_backend.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ {changes_made} corre√ß√µes aplicadas!")
        print(f"üíæ Backup dispon√≠vel: {backup_filename}")
        
        print("\\nüß™ TESTE NOVAMENTE:")
        print("python -c \"")
        print("from tennis_comparison_backend import TennisComparisonEngine")
        print("analyzer = TennisComparisonEngine()")
        print("result = analyzer.analyze_movement_from_content('teste_neutro.mp4')")
        print("print('Novo resultado:', result['movement'])")
        print("\"")

if __name__ == "__main__":
    fix_detection_algorithm()
'''
    
    with open('fix_detection_algorithm.py', 'w', encoding='utf-8') as f:
        f.write(correction_code)
    
    print("‚úÖ Script de corre√ß√£o criado: fix_detection_algorithm.py")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("1. Execute: python debug_detection.py")
    print("2. Analise os resultados")
    print("3. Execute: python fix_detection_algorithm.py")
    print("4. Teste novamente a detec√ß√£o")
    
    print("\nüîç O QUE VAMOS INVESTIGAR:")
    print("- Thresholds de amplitude muito altos")
    print("- Crit√©rios de altura do pulso incorretos")
    print("- L√≥gica invertida Drive vs Push")
    print("- Fallbacks que for√ßam Push como padr√£o")

if __name__ == "__main__":
    debug_detection_algorithm()
